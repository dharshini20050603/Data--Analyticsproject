# -*- coding: utf-8 -*-
"""iphonedata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rjwdqoSq2CfX0nvqjurmb1dE7aX92Brx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files


uploaded = files.upload()

df = pd.read_excel('apple_products.xlsx')
print(df.head())

df = df.drop_duplicates()

df = df.dropna(subset=['Sale Price', 'Star Rating', 'Number Of Reviews', 'Number Of Ratings'])

df['Sale Price'] = pd.to_numeric(df['Sale Price'], errors='coerce')
df['Mrp'] = pd.to_numeric(df['Mrp'], errors='coerce')
df['Star Rating'] = pd.to_numeric(df['Star Rating'], errors='coerce')
df['Number Of Reviews'] = pd.to_numeric(df['Number Of Reviews'], errors='coerce')
df['Number Of Ratings'] = pd.to_numeric(df['Number Of Ratings'], errors='coerce')

# Top 10 by Sale Price
top10_price = df.sort_values(by='Sale Price', ascending=False).head(10)
print("\nTop 10 by Sales Price:")
print(top10_price[['Product Name', 'Sale Price', 'Star Rating']])

plt.figure(figsize=(12,8))  # Increased height
bars = plt.bar(top10_price["Product Name"], top10_price["Sale Price"], color="blue", width=0.6)  # Thicker bars

# Add values above bars
for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.05,
             f'₹{bar.get_height():,.0f}', ha='center', fontsize=10)

plt.title("Top 10 Apple Products by Sale Price", fontsize=16)
plt.xlabel("Product Name")
plt.ylabel("Sale Price (₹)")
plt.xticks(rotation=45, ha="right")
plt.ylim(0, max(top10_price["Sale Price"]) * 1.1)  # Extra space above bars
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Bottom 10 by Sale Price
bottom10_price = df.sort_values(by='Sale Price', ascending=True).head(10)

plt.figure(figsize=(12,8))  # Increased height
bars = plt.bar(bottom10_price["Product Name"], bottom10_price["Sale Price"], color="green", width=0.6)  # Thicker bars

# Add values above bars
for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.05,
             f'₹{bar.get_height():,.0f}', ha='center', fontsize=10)

plt.title("Bottom 10 Apple Products by Sale Price", fontsize=16)
plt.xlabel("Product Name")
plt.ylabel("Sale Price (₹)")
plt.xticks(rotation=45, ha="right")
plt.ylim(0, max(bottom10_price["Sale Price"]) * 1.1)  # Extra space above bars
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Top 10 by Star Rating
top10_rating = df.sort_values(by='Star Rating', ascending=False).head(10)

plt.figure(figsize=(12,8))  # Increased height from 6 → 8
bars = plt.bar(top10_rating["Product Name"], top10_rating["Star Rating"], color="orange", width=0.6)  # Wider bars

# Add values above bars
for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.05,
             f'{bar.get_height():.1f}', ha='center', fontsize=10)

plt.title("Top 10 Apple Products by Star Rating", fontsize=16)
plt.xlabel("Product Name")
plt.ylabel("Star Rating")
plt.xticks(rotation=45, ha="right")
plt.ylim(0, max(top10_rating["Star Rating"]) + 1)  # Add extra height space
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

print("Plotting finished.") # Add this line to confirm execution

# Calculate Discount Percentage and find Top 10 Best Deals
df['Discount Percentage'] = ((df['Mrp'] - df['Sale Price']) / df['Mrp']) * 100
best_deals = df.sort_values(by='Discount Percentage', ascending=False).head(10)

print("\nTop 10 Best Discount Deals:")
print(best_deals[['Product Name', 'Discount Percentage', 'Sale Price']])
# Calculate Discount Percentage and find Top 10 Best Deals
df['Discount Percentage'] = ((df['Mrp'] - df['Sale Price']) / df['Mrp']) * 100
best_deals = df.sort_values(by='Discount Percentage', ascending=False).head(10)

plt.figure(figsize=(12,8))  # Increased height
bars = plt.bar(best_deals["Product Name"], best_deals["Discount Percentage"], color="purple", width=0.6)

# Add values above bars
for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
             f'{bar.get_height():.1f}%', ha='center', fontsize=10)

plt.title("Top 10 Best Discount Deals", fontsize=16)
plt.xlabel("Product Name")
plt.ylabel("Discount Percentage (%)")
plt.xticks(rotation=45, ha="right")
plt.ylim(0, max(best_deals["Discount Percentage"]) * 1.1)  # Extra space above bars
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,6))
plt.scatter(df['Number Of Reviews'], df['Star Rating'], alpha=0.6, color='orange', edgecolors='black')
plt.title("Number of Reviews vs Star Rating", fontsize=16)
plt.xlabel("Number of Reviews")
plt.ylabel("Star Rating")
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import plotly.express as px
data = {
    "Product Name": ["iPhone 12 Mini", "Samsung S21", "OnePlus 9", "Mi 11X", "Vivo V21"],
    "Sale Price": [59900, 69900, 49999, 29999, 25999],
    "Savings": [10000, 12000, 8000, 5000, 4000],
    "Discount Percentage": [14.3, 14.7, 13.8, 14.3, 13.3],
    "Star Rating": [4.5, 4.6, 4.3, 4.1, 4.0]
}

df = pd.DataFrame(data)

# Scatter plot (like Tableau)
fig = px.scatter(
    df,
    x="Sale Price",
    y="Savings",
    size="Star Rating",
    color="Discount Percentage",
    hover_name="Product Name",
    hover_data=["Sale Price", "Savings", "Star Rating"],
    title="Saving Details",
    color_continuous_scale="Viridis"
)

fig.update_layout(
    xaxis_title="Sale Price (₹)",
    yaxis_title="Savings (₹)",
    title_x=0.5
)

fig.show()

import plotly.graph_objects as go
import plotly.express as px
data = {
    "Brand": ["APPLE", "APPLE", "APPLE", "APPLE", "APPLE"],
    "Product Name": [
        "APPLE iPhone 11",
        "APPLE iPhone 12",
        "APPLE iPhone 12 Mini",
        "APPLE iPhone 13",
        "APPLE iPhone 14"
    ],
    "Count of apple_products": [1, 1, 1, 1, 1],
    "Discount Percentage": [1400.0, 800.0, 1400.0, 1400.0, 800.0],
    "MRP": [54900, 59900, 54900, 54900, 59900],
    "Number Of Ratings": [43470, 43700, 43470, 43470, 43707],
    "Number Of Reviews": [3331, 3331, 3331, 3331, 3357],
    "Sale Price": [46999, 54999, 46999, 46999, 54999],
    "Star Rating": [4.6, 4.6, 4.6, 4.6, 4.6],
    "Savings": [7901, 4901, 7901, 7901, 4901]
}

df = pd.DataFrame(data)

# Create a colorful table in Plotly
fig = go.Figure(data=[go.Table(
    header=dict(
        values=list(df.columns),
        fill_color='purple',
        font=dict(color='white', size=12),
        align='center'
    ),
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color=[['lightyellow', 'white'] * (len(df)//2 + 1)],
        align='center',
        font=dict(size=11)
    )
)])

fig.update_layout(
    title="Best Top 5 Overall",
    title_x=0.5
)

fig.show()